using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Il2CppSystem;
using KernellClientUI.Managers;
using KernellClientUI.UI.QuickMenu;
using KernellVRC;
using KernellVRCLite.Utils;
using MelonLoader;
using UnhollowerBaseLib;
using UnhollowerRuntimeLib;
using UnityEngine;
using VRC.Core;
using VRC.SDK3.Components;
using VRC.SDKBase;
using VRC.UI.Elements;

namespace KernelVRC.Modules.Exploits
{
	// Token: 0x020000BC RID: 188
	internal class Fly : KernelModuleBase
	{
		// Token: 0x170001D3 RID: 467
		// (get) Token: 0x060009F5 RID: 2549 RVA: 0x0003EB48 File Offset: 0x0003CD48
		public override string ModuleName
		{
			get
			{
				return "Fly";
			}
		}

		// Token: 0x170001D4 RID: 468
		// (get) Token: 0x060009F6 RID: 2550 RVA: 0x00003873 File Offset: 0x00001A73
		public override string Version
		{
			get
			{
				return "2.1.0";
			}
		}

		// Token: 0x170001D5 RID: 469
		// (get) Token: 0x060009F7 RID: 2551 RVA: 0x00038C7D File Offset: 0x00036E7D
		public override string Author
		{
			get
			{
				return "KernelVRC Team";
			}
		}

		// Token: 0x170001D6 RID: 470
		// (get) Token: 0x060009F8 RID: 2552 RVA: 0x0002EF5B File Offset: 0x0002D15B
		public override ModuleCapabilities Capabilities
		{
			get
			{
				return ModuleCapabilities.Update | ModuleCapabilities.LateUpdate | ModuleCapabilities.GUI | ModuleCapabilities.WorldEvents | ModuleCapabilities.SceneEvents | ModuleCapabilities.UIInit;
			}
		}

		// Token: 0x170001D7 RID: 471
		// (get) Token: 0x060009F9 RID: 2553 RVA: 0x00003312 File Offset: 0x00001512
		public override UpdateFrequency UpdateFrequency
		{
			get
			{
				return UpdateFrequency.Every2Frames;
			}
		}

		// Token: 0x170001D8 RID: 472
		// (get) Token: 0x060009FA RID: 2554 RVA: 0x00003315 File Offset: 0x00001515
		public override ModulePriority Priority
		{
			get
			{
				return ModulePriority.Normal;
			}
		}

		// Token: 0x060009FB RID: 2555 RVA: 0x0003EB50 File Offset: 0x0003CD50
		public override void OnInitialize()
		{
			try
			{
				this._originalGravity = Physics.gravity;
				this.InitializeKeyStates();
				base.Log(string.Format("Module initialized with original gravity: {0}", this._originalGravity));
			}
			catch (Exception ex)
			{
				base.LogError("Error during initialization: " + ex.Message);
			}
		}

		// Token: 0x060009FC RID: 2556 RVA: 0x0003EBBC File Offset: 0x0003CDBC
		public override void OnApplicationStart()
		{
			base.Log("Application started");
		}

		// Token: 0x060009FD RID: 2557 RVA: 0x0003EBCC File Offset: 0x0003CDCC
		public override void OnUiManagerInit()
		{
			try
			{
				bool flag;
				if (MenuSetup.IsReady)
				{
					UiManager uiManager = MenuSetup._uiManager;
					flag = (((uiManager != null) ? uiManager.QMMenu : null) == null);
				}
				else
				{
					flag = true;
				}
				bool flag2 = flag;
				if (flag2)
				{
					base.LogWarning("MenuSetup not ready, deferring UI initialization");
				}
				else
				{
					ReCategoryPage categoryPage = MenuSetup._uiManager.QMMenu.GetCategoryPage("Utility");
					ReMenuCategory reMenuCategory = (categoryPage != null) ? categoryPage.GetCategory("Movement") : null;
					bool flag3 = reMenuCategory == null;
					if (flag3)
					{
						base.LogError("Could not find Utility/Movement category for UI initialization");
					}
					else
					{
						reMenuCategory.AddToggle("Flight", "Toggle flight movement", new Action<bool>(this.ToggleFly), this._isFlying, "#ffffff");
						reMenuCategory.AddToggle("Double Tap Jump", "Enable double-tap jump for flight", delegate(bool s)
						{
							this._doubleTapEnabled = s;
						}, this._doubleTapEnabled, "#ffffff");
						ReCategoryPage categoryPage2 = MenuSetup._uiManager.QMMenu.GetCategoryPage("Utility");
						ReMenuSliderCategory reMenuSliderCategory = (categoryPage2 != null) ? categoryPage2.GetCategory("Movement").AddCategoryPage("Flight settings", "", null, "#ffffff").AddSliderCategory("Flight Settings", true, "#ffffff", false) : null;
						bool flag4 = reMenuSliderCategory != null;
						if (flag4)
						{
							reMenuSliderCategory.AddSlider("Speed", "Adjust flight speed", delegate(float s)
							{
								this._flySpeed = s;
							}, this._flySpeed, 1f, 500f, "#ffffff");
							reMenuSliderCategory.AddSlider("Boost Multiplier", "Speed multiplier when boosting", delegate(float s)
							{
								this._boostMultiplier = s;
							}, this._boostMultiplier, 1f, 10f, "#ffffff");
							reMenuSliderCategory.AddSlider("Double Tap Time", "Time window for double-tap detection", delegate(float s)
							{
								this._doubleTapInterval = s;
							}, this._doubleTapInterval, 0.1f, 1f, "#ffffff");
						}
						IButtonPage launchPad = MenuSetup._uiManager.LaunchPad;
						bool flag5 = launchPad != null;
						if (flag5)
						{
							launchPad.AddToggle("Flight", "Toggle flight movement", new Action<bool>(this.ToggleFly), this._isFlying, "#ffffff");
						}
						this.StartFlightCoroutine();
						base.Log("UI initialized successfully");
						this._uiInitialized = true;
					}
				}
			}
			catch (Exception ex)
			{
				base.LogError("UI initialization error: " + ex.Message);
			}
		}

		// Token: 0x060009FE RID: 2558 RVA: 0x0003EE28 File Offset: 0x0003D028
		public override void OnEnterWorld(ApiWorld world, ApiWorldInstance instance)
		{
			try
			{
				bool isFlying = this._isFlying;
				if (isFlying)
				{
					base.Log("Disabling flight for world transition: " + world.name);
					this.ToggleFly(false);
				}
				this.ResetPlayerReferences();
				this._originalGravity = Physics.gravity;
				base.Log("Entered world: " + world.name);
			}
			catch (Exception ex)
			{
				base.LogError("Error handling world enter: " + ex.Message);
			}
		}

		// Token: 0x060009FF RID: 2559 RVA: 0x0003EEBC File Offset: 0x0003D0BC
		public override void OnSceneWasLoaded(int buildIndex, string sceneName)
		{
			try
			{
				bool isFlying = this._isFlying;
				if (isFlying)
				{
					this.ToggleFly(false);
					base.Log("Disabled flight due to scene change: " + sceneName);
				}
				this.ResetPlayerReferences();
				base.Log(string.Format("Scene loaded: {0} (Index: {1})", sceneName, buildIndex));
			}
			catch (Exception ex)
			{
				base.LogError("Error handling scene load: " + ex.Message);
			}
		}

		// Token: 0x06000A00 RID: 2560 RVA: 0x0003EF40 File Offset: 0x0003D140
		public override void OnUpdate()
		{
			try
			{
				this.HandleEmergencyInput();
				bool flag = Time.time - this._lastPlayerRefreshTime > 1f;
				if (flag)
				{
					this.RefreshPlayerReferences();
					this._lastPlayerRefreshTime = Time.time;
				}
				this.UpdateSafePosition();
				this.UpdateKeyStates();
			}
			catch (Exception ex)
			{
				base.LogError("Error in update loop: " + ex.Message);
			}
		}

		// Token: 0x06000A01 RID: 2561 RVA: 0x0003EFC0 File Offset: 0x0003D1C0
		public override void OnShutdown()
		{
			try
			{
				bool isFlying = this._isFlying;
				if (isFlying)
				{
					this.ToggleFly(false);
				}
				this.StopFlightCoroutine();
				this._disabledColliders.Clear();
				this._playerColliders.Clear();
				this._keyStates.Clear();
				base.Log("Module cleanup completed");
			}
			catch (Exception ex)
			{
				base.LogError("Error during cleanup: " + ex.Message);
			}
			base.OnShutdown();
		}

		// Token: 0x06000A02 RID: 2562 RVA: 0x0003F050 File Offset: 0x0003D250
		private void InitializeKeyStates()
		{
			this._keyStates[119] = false;
			this._keyStates[97] = false;
			this._keyStates[115] = false;
			this._keyStates[100] = false;
			this._keyStates[101] = false;
			this._keyStates[113] = false;
			this._keyStates[32] = false;
			this._keyStates[304] = false;
			this._keyStates[306] = false;
			this._keyStates[102] = false;
			this._keyStates[27] = false;
		}

		// Token: 0x06000A03 RID: 2563 RVA: 0x0003F10C File Offset: 0x0003D30C
		private void UpdateKeyStates()
		{
			KeyCode[] array = Enumerable.ToArray<KeyCode>(this._keyStates.Keys);
			foreach (KeyCode keyCode in array)
			{
				this._keyStates[keyCode] = Input.GetKey(keyCode);
			}
		}

		// Token: 0x06000A04 RID: 2564 RVA: 0x0003F158 File Offset: 0x0003D358
		private void RefreshPlayerReferences()
		{
			try
			{
				bool flag = this._player == null;
				if (flag)
				{
					this._player = VRCPlayer.field_Internal_Static_VRCPlayer_0;
				}
				bool flag2 = this._player != null && this._playerRigidbody == null;
				if (flag2)
				{
					this._playerRigidbody = this._player.GetComponent<Rigidbody>();
					bool flag3 = this._playerRigidbody != null;
					if (flag3)
					{
						this._wasKinematic = this._playerRigidbody.isKinematic;
						this._wasUsingGravity = this._playerRigidbody.useGravity;
					}
				}
			}
			catch (Exception ex)
			{
				base.LogError("Error refreshing player references: " + ex.Message);
			}
		}

		// Token: 0x06000A05 RID: 2565 RVA: 0x0003F21C File Offset: 0x0003D41C
		private void ResetPlayerReferences()
		{
			this._player = null;
			this._playerRigidbody = null;
			this._cameraTransform = null;
			this._lastPlayerRefreshTime = 0f;
		}

		// Token: 0x06000A06 RID: 2566 RVA: 0x0003F240 File Offset: 0x0003D440
		private void InitializeCamera()
		{
			try
			{
				VRCVrCamera field_Private_Static_VRCVrCamera_ = VRCVrCamera.field_Private_Static_VRCVrCamera_0;
				Transform transform;
				if (field_Private_Static_VRCVrCamera_ == null)
				{
					transform = null;
				}
				else
				{
					Camera field_Public_Camera_ = field_Private_Static_VRCVrCamera_.field_Public_Camera_0;
					transform = ((field_Public_Camera_ != null) ? field_Public_Camera_.transform : null);
				}
				Transform transform2 = transform;
				bool flag = this._cameraTransform == null || this._cameraTransform != transform2;
				if (flag)
				{
					this._cameraTransform = transform2;
				}
			}
			catch (Exception ex)
			{
				base.LogError("Error initializing camera: " + ex.Message);
			}
		}

		// Token: 0x06000A07 RID: 2567 RVA: 0x0003F2C8 File Offset: 0x0003D4C8
		private void ToggleFly(bool enable)
		{
			try
			{
				this.RefreshPlayerReferences();
				bool flag = this._player == null;
				if (flag)
				{
					base.LogError("Cannot toggle flight - player reference not available");
				}
				else
				{
					this._isFlying = enable;
					this.InitializeCamera();
					if (enable)
					{
						this._lastKnownSafePosition = this._player.transform.position;
						this.EnableFlightMode();
						base.Log(string.Format("Flight enabled at position: {0}", this._lastKnownSafePosition));
					}
					else
					{
						this.DisableFlightMode();
						base.Log("Flight disabled");
					}
				}
			}
			catch (Exception ex)
			{
				base.LogError("Error toggling flight: " + ex.Message);
			}
		}

		// Token: 0x06000A08 RID: 2568 RVA: 0x0003F394 File Offset: 0x0003D594
		private void EnableFlightMode()
		{
			try
			{
				bool flag = this._playerRigidbody != null;
				if (flag)
				{
					this._playerRigidbody.velocity = Vector3.zero;
					this._playerRigidbody.angularVelocity = Vector3.zero;
					this._playerRigidbody.isKinematic = true;
					this._playerRigidbody.useGravity = false;
					this._playerRigidbody.detectCollisions = true;
				}
				Physics.gravity = Vector3.zero;
				this.DisableWorldCollidersExceptPickups();
				this.DisablePlayerCollidersExceptHands();
				base.Log("Flight mode enabled - Physics modified for pickup-friendly flight");
			}
			catch (Exception ex)
			{
				base.LogError("Error enabling flight mode: " + ex.Message);
			}
		}

		// Token: 0x06000A09 RID: 2569 RVA: 0x0003F454 File Offset: 0x0003D654
		private void DisableFlightMode()
		{
			try
			{
				bool flag = this._playerRigidbody != null;
				if (flag)
				{
					this._playerRigidbody.velocity = Vector3.zero;
					this._playerRigidbody.angularVelocity = Vector3.zero;
					this._playerRigidbody.isKinematic = this._wasKinematic;
					this._playerRigidbody.useGravity = this._wasUsingGravity;
					this._playerRigidbody.detectCollisions = true;
				}
				Physics.gravity = this._originalGravity;
				this.EnableAllColliders();
				this.EnablePlayerColliders();
				base.Log("Flight mode disabled - Physics restored, colliders enabled");
			}
			catch (Exception ex)
			{
				base.LogError("Error disabling flight mode: " + ex.Message);
			}
		}

		// Token: 0x06000A0A RID: 2570 RVA: 0x0003F520 File Offset: 0x0003D720
		private void EmergencyLanding()
		{
			try
			{
				base.Log("Emergency landing initiated!");
				this.ToggleFly(false);
				bool flag = this._player != null && this._lastKnownSafePosition != Vector3.zero;
				if (flag)
				{
					this._player.transform.position = this._lastKnownSafePosition;
					base.Log(string.Format("Emergency teleport to safe position: {0}", this._lastKnownSafePosition));
				}
			}
			catch (Exception ex)
			{
				base.LogError("Error during emergency landing: " + ex.Message);
			}
		}

		// Token: 0x06000A0B RID: 2571 RVA: 0x0003F5CC File Offset: 0x0003D7CC
		private void HandleEmergencyInput()
		{
			bool flag = this._isFlying && this._emergencyLandingEnabled && this._keyStates[27];
			if (flag)
			{
				this.EmergencyLanding();
			}
		}

		// Token: 0x06000A0C RID: 2572 RVA: 0x0003F608 File Offset: 0x0003D808
		private void UpdateSafePosition()
		{
			bool flag = this._isFlying && Time.time - this._lastSafePositionUpdateTime > 5f;
			if (flag)
			{
				bool flag2 = this._player != null;
				if (flag2)
				{
					Vector3 position = this._player.transform.position;
					bool flag3 = this.IsPositionSafe(position);
					if (flag3)
					{
						this._lastKnownSafePosition = position;
						this._lastSafePositionUpdateTime = Time.time;
					}
				}
			}
		}

		// Token: 0x06000A0D RID: 2573 RVA: 0x0003F67C File Offset: 0x0003D87C
		private bool IsPlayerCollider(Collider collider)
		{
			bool result;
			try
			{
				bool flag = collider == null;
				if (flag)
				{
					result = false;
				}
				else
				{
					Transform transform = collider.transform;
					while (transform != null)
					{
						bool flag2 = transform.GetComponent<VRCPlayer>() != null;
						if (flag2)
						{
							return true;
						}
						transform = transform.parent;
					}
					result = false;
				}
			}
			catch
			{
				result = false;
			}
			return result;
		}

		// Token: 0x06000A0E RID: 2574 RVA: 0x0003F6E8 File Offset: 0x0003D8E8
		private bool ShouldPreserveCollider(Collider collider)
		{
			bool result;
			try
			{
				bool flag = collider == null;
				if (flag)
				{
					result = false;
				}
				else
				{
					Transform transform = collider.transform;
					while (transform != null)
					{
						bool flag2 = transform.GetComponent<VRC_Pickup>() != null;
						if (flag2)
						{
							return true;
						}
						Il2CppArrayBase<Component> components = transform.GetComponents<Component>();
						foreach (Component component in components)
						{
							bool flag3 = component != null && component.GetIl2CppType().Name.Contains("Pickup");
							if (flag3)
							{
								return true;
							}
						}
						transform = transform.parent;
					}
					foreach (Type type in this._blacklistedComponents)
					{
						bool flag4 = collider.GetComponent(type) != null;
						if (flag4)
						{
							return true;
						}
					}
					result = false;
				}
			}
			catch
			{
				result = true;
			}
			return result;
		}

		// Token: 0x06000A0F RID: 2575 RVA: 0x0003F850 File Offset: 0x0003DA50
		private void DisableWorldCollidersExceptPickups()
		{
			try
			{
				bool flag = this._player == null;
				if (!flag)
				{
					Il2CppArrayBase<Collider> il2CppArrayBase = Object.FindObjectsOfType<Collider>();
					int num = 0;
					foreach (Collider collider in il2CppArrayBase)
					{
						bool flag2 = collider == null || !collider.enabled || this.IsPlayerCollider(collider) || this.ShouldPreserveCollider(collider);
						if (!flag2)
						{
							collider.enabled = false;
							this._disabledColliders.Add(collider);
							num++;
						}
					}
					base.Log(string.Format("Disabled {0} world colliders (preserved all pickups and UI)", num));
				}
			}
			catch (Exception ex)
			{
				base.LogError("Error disabling world colliders: " + ex.Message);
			}
		}

		// Token: 0x06000A10 RID: 2576 RVA: 0x0003F944 File Offset: 0x0003DB44
		private void EnableAllColliders()
		{
			try
			{
				int num = 0;
				List<Collider> list = new List<Collider>();
				foreach (Collider collider in this._disabledColliders)
				{
					bool flag = collider != null;
					if (flag)
					{
						collider.enabled = true;
						num++;
					}
					else
					{
						list.Add(collider);
					}
				}
				foreach (Collider item in list)
				{
					this._disabledColliders.Remove(item);
				}
				this._disabledColliders.Clear();
				base.Log(string.Format("Re-enabled {0} world colliders", num));
			}
			catch (Exception ex)
			{
				base.LogError("Error enabling world colliders: " + ex.Message);
			}
		}

		// Token: 0x06000A11 RID: 2577 RVA: 0x0003FA60 File Offset: 0x0003DC60
		private void DisablePlayerCollidersExceptHands()
		{
			try
			{
				bool flag = this._player == null;
				if (!flag)
				{
					Il2CppArrayBase<Collider> componentsInChildren = this._player.GetComponentsInChildren<Collider>();
					int num = 0;
					foreach (Collider collider in componentsInChildren)
					{
						bool flag2 = collider == null || !collider.enabled;
						if (!flag2)
						{
							string text = collider.name.ToLower();
							bool flag3 = text.Contains("hand") || text.Contains("finger") || text.Contains("palm") || text.Contains("wrist") || text.Contains("grip");
							if (!flag3)
							{
								bool flag4 = this.ShouldPreserveCollider(collider);
								if (!flag4)
								{
									collider.enabled = false;
									this._playerColliders.Add(collider);
									num++;
								}
							}
						}
					}
					base.Log(string.Format("Disabled {0} player colliders (preserved hand colliders for pickups)", num));
				}
			}
			catch (Exception ex)
			{
				base.LogError("Error disabling player colliders: " + ex.Message);
			}
		}

		// Token: 0x06000A12 RID: 2578 RVA: 0x0003FBD8 File Offset: 0x0003DDD8
		private void EnablePlayerColliders()
		{
			try
			{
				int num = 0;
				List<Collider> list = new List<Collider>();
				foreach (Collider collider in this._playerColliders)
				{
					bool flag = collider != null;
					if (flag)
					{
						collider.enabled = true;
						num++;
					}
					else
					{
						list.Add(collider);
					}
				}
				foreach (Collider item in list)
				{
					this._playerColliders.Remove(item);
				}
				this._playerColliders.Clear();
				base.Log(string.Format("Re-enabled {0} player colliders", num));
			}
			catch (Exception ex)
			{
				base.LogError("Error enabling player colliders: " + ex.Message);
			}
		}

		// Token: 0x06000A13 RID: 2579 RVA: 0x0003FCF4 File Offset: 0x0003DEF4
		private void StartFlightCoroutine()
		{
			bool flag = this._flightCoroutine == null;
			if (flag)
			{
				this._flightCoroutine = (Coroutine)MelonCoroutines.Start(this.FlightCoroutine());
				base.Log("Flight coroutine started");
			}
		}

		// Token: 0x06000A14 RID: 2580 RVA: 0x0003FD34 File Offset: 0x0003DF34
		private void StopFlightCoroutine()
		{
			bool flag = this._flightCoroutine != null;
			if (flag)
			{
				MelonCoroutines.Stop(this._flightCoroutine);
				this._flightCoroutine = null;
				base.Log("Flight coroutine stopped");
			}
		}

		// Token: 0x06000A15 RID: 2581 RVA: 0x0003FD70 File Offset: 0x0003DF70
		private IEnumerator FlightCoroutine()
		{
			base.Log("Flight coroutine started");
			for (;;)
			{
				try
				{
					this.HandleDoubleTapJump();
					bool flag = this._keyStates[306] && Input.GetKeyDown(102);
					if (flag)
					{
						this.ToggleFly(!this._isFlying);
					}
					bool isFlying = this._isFlying;
					if (isFlying)
					{
						this.HandleFlight();
					}
				}
				catch (Exception ex2)
				{
					Exception ex = ex2;
					base.LogError("Error in flight coroutine: " + ex.Message);
					bool isFlying2 = this._isFlying;
					if (isFlying2)
					{
						this.ToggleFly(false);
					}
				}
				yield return null;
			}
			yield break;
		}

		// Token: 0x06000A16 RID: 2582 RVA: 0x0003FD80 File Offset: 0x0003DF80
		private void HandleDoubleTapJump()
		{
			try
			{
				bool flag = this._doubleTapEnabled && Input.GetKeyDown(32);
				if (flag)
				{
					bool flag2 = Time.time - this._lastJumpTime <= this._doubleTapInterval;
					if (flag2)
					{
						this.ToggleFly(!this._isFlying);
						base.Log(string.Format("Double-tap jump triggered - Flight: {0}", this._isFlying));
					}
					this._lastJumpTime = Time.time;
				}
			}
			catch (Exception ex)
			{
				base.LogError("Error handling double-tap jump: " + ex.Message);
			}
		}

		// Token: 0x06000A17 RID: 2583 RVA: 0x0003FE2C File Offset: 0x0003E02C
		private void HandleFlight()
		{
			try
			{
				bool flag = this._player == null;
				if (!flag)
				{
					this.InitializeCamera();
					float num = this._keyStates[304] ? (this._flySpeed * this._boostMultiplier) : this._flySpeed;
					bool isInVR = PlayerUtil.IsInVR;
					Vector3 vector;
					if (isInVR)
					{
						vector = this.GetVRInput();
					}
					else
					{
						vector = this.GetDesktopInput();
					}
					bool flag2 = vector.sqrMagnitude > 0.1f;
					if (flag2)
					{
						vector.Normalize();
						Vector3 vector2 = vector * num * Time.deltaTime;
						Vector3 position = this._player.transform.position + vector2;
						bool flag3 = this.IsPositionSafe(position);
						if (flag3)
						{
							this._player.transform.position = position;
						}
					}
					bool flag4 = this._playerRigidbody != null;
					if (flag4)
					{
						this._playerRigidbody.velocity = Vector3.zero;
						this._playerRigidbody.angularVelocity = Vector3.zero;
					}
				}
			}
			catch (Exception ex)
			{
				base.LogError("Error handling flight: " + ex.Message);
			}
		}

		// Token: 0x06000A18 RID: 2584 RVA: 0x0003FF7C File Offset: 0x0003E17C
		private Vector3 GetVRInput()
		{
			Vector3 vector = Vector3.zero;
			try
			{
				float num = Input.GetAxis("Oculus_CrossPlatform_PrimaryThumbstickVertical");
				float num2 = Input.GetAxis("Oculus_CrossPlatform_PrimaryThumbstickHorizontal");
				float axis = Input.GetAxis("Oculus_CrossPlatform_SecondaryThumbstickVertical");
				float axis2 = Input.GetAxis("Oculus_CrossPlatform_SecondaryThumbstickHorizontal");
				float axis3 = Input.GetAxis("Oculus_CrossPlatform_PrimaryIndexTrigger");
				float axis4 = Input.GetAxis("Oculus_CrossPlatform_SecondaryIndexTrigger");
				float axis5 = Input.GetAxis("Oculus_CrossPlatform_PrimaryHandTrigger");
				float axis6 = Input.GetAxis("Oculus_CrossPlatform_SecondaryHandTrigger");
				bool flag = Mathf.Abs(num) < 0.1f;
				if (flag)
				{
					float axis7 = Input.GetAxis("Vertical");
					bool flag2 = Mathf.Abs(axis7) > 0.1f;
					if (flag2)
					{
						num = axis7;
					}
				}
				bool flag3 = Mathf.Abs(num2) < 0.1f;
				if (flag3)
				{
					float axis8 = Input.GetAxis("Horizontal");
					bool flag4 = Mathf.Abs(axis8) > 0.1f;
					if (flag4)
					{
						num2 = axis8;
					}
				}
				bool flag5 = this._cameraTransform != null;
				if (flag5)
				{
					Vector3 forward = this._cameraTransform.forward;
					Vector3 right = this._cameraTransform.right;
					Vector3 vector2 = forward;
					vector2.y = 0f;
					vector2.Normalize();
					Vector3 vector3 = right;
					vector3.y = 0f;
					vector3.Normalize();
					vector += vector2 * num;
					vector += vector3 * num2;
					vector.y += axis;
					bool flag6 = axis5 > 0.7f;
					if (flag6)
					{
						vector.y += 1f;
					}
					bool flag7 = axis6 > 0.7f;
					if (flag7)
					{
						vector.y -= 1f;
					}
					bool key = Input.GetKey(330);
					if (key)
					{
						vector.y += 1f;
					}
					bool key2 = Input.GetKey(331);
					if (key2)
					{
						vector.y -= 1f;
					}
				}
			}
			catch (Exception ex)
			{
				base.LogError("Error getting VR input: " + ex.Message);
				vector = this.GetDesktopInput();
			}
			return vector;
		}

		// Token: 0x06000A19 RID: 2585 RVA: 0x000401C0 File Offset: 0x0003E3C0
		private Vector3 GetDesktopInput()
		{
			Vector3 vector = Vector3.zero;
			try
			{
				bool flag = this._cameraTransform == null;
				if (flag)
				{
					return vector;
				}
				bool flag2 = this._keyStates[119];
				if (flag2)
				{
					vector += this._cameraTransform.forward;
				}
				bool flag3 = this._keyStates[115];
				if (flag3)
				{
					vector -= this._cameraTransform.forward;
				}
				bool flag4 = this._keyStates[100];
				if (flag4)
				{
					vector += this._cameraTransform.right;
				}
				bool flag5 = this._keyStates[97];
				if (flag5)
				{
					vector -= this._cameraTransform.right;
				}
				bool flag6 = this._keyStates[101];
				if (flag6)
				{
					vector += Vector3.up;
				}
				bool flag7 = this._keyStates[113];
				if (flag7)
				{
					vector -= Vector3.up;
				}
			}
			catch (Exception ex)
			{
				base.LogError("Error getting desktop input: " + ex.Message);
			}
			return vector;
		}

		// Token: 0x06000A1A RID: 2586 RVA: 0x000402F4 File Offset: 0x0003E4F4
		private bool IsPositionSafe(Vector3 position)
		{
			return position.magnitude < 10000f;
		}

		// Token: 0x06000A1B RID: 2587 RVA: 0x00040314 File Offset: 0x0003E514
		public bool IsFlying()
		{
			return this._isFlying;
		}

		// Token: 0x06000A1C RID: 2588 RVA: 0x0004032C File Offset: 0x0003E52C
		public void SetFlightSpeed(float speed)
		{
			this._flySpeed = Mathf.Clamp(speed, 1f, 500f);
			base.Log(string.Format("Flight speed set to: {0}", this._flySpeed));
		}

		// Token: 0x06000A1D RID: 2589 RVA: 0x00040364 File Offset: 0x0003E564
		public float GetFlightSpeed()
		{
			return this._flySpeed;
		}

		// Token: 0x06000A1E RID: 2590 RVA: 0x0004037C File Offset: 0x0003E57C
		public void SetEmergencyLandingEnabled(bool enabled)
		{
			this._emergencyLandingEnabled = enabled;
			base.Log("Emergency landing " + (enabled ? "enabled" : "disabled"));
		}

		// Token: 0x04000519 RID: 1305
		private readonly List<Collider> _disabledColliders = new List<Collider>();

		// Token: 0x0400051A RID: 1306
		private readonly List<Collider> _playerColliders = new List<Collider>();

		// Token: 0x0400051B RID: 1307
		private Transform _cameraTransform;

		// Token: 0x0400051C RID: 1308
		private VRCPlayer _player;

		// Token: 0x0400051D RID: 1309
		private Rigidbody _playerRigidbody;

		// Token: 0x0400051E RID: 1310
		private bool _isFlying;

		// Token: 0x0400051F RID: 1311
		private bool _wasKinematic;

		// Token: 0x04000520 RID: 1312
		private bool _wasUsingGravity;

		// Token: 0x04000521 RID: 1313
		private float _flySpeed = 8f;

		// Token: 0x04000522 RID: 1314
		private float _boostMultiplier = 3f;

		// Token: 0x04000523 RID: 1315
		private bool _doubleTapEnabled;

		// Token: 0x04000524 RID: 1316
		private float _doubleTapInterval = 0.3f;

		// Token: 0x04000525 RID: 1317
		private float _lastJumpTime;

		// Token: 0x04000526 RID: 1318
		private Vector3 _originalGravity;

		// Token: 0x04000527 RID: 1319
		private float _lastPlayerRefreshTime;

		// Token: 0x04000528 RID: 1320
		private const float PLAYER_REFRESH_INTERVAL = 1f;

		// Token: 0x04000529 RID: 1321
		private Vector3 _lastKnownSafePosition;

		// Token: 0x0400052A RID: 1322
		private bool _emergencyLandingEnabled = true;

		// Token: 0x0400052B RID: 1323
		private float _lastSafePositionUpdateTime;

		// Token: 0x0400052C RID: 1324
		private const float SAFE_POSITION_UPDATE_INTERVAL = 5f;

		// Token: 0x0400052D RID: 1325
		private readonly List<Type> _blacklistedComponents = new List<Type>
		{
			Il2CppType.Of<QuickMenu>(),
			Il2CppType.Of<VRC_AvatarPedestal>(),
			Il2CppType.Of<VRC_UiShape>(),
			Il2CppType.Of<VRCUiShape>()
		};

		// Token: 0x0400052E RID: 1326
		private Coroutine _flightCoroutine;

		// Token: 0x0400052F RID: 1327
		private readonly Dictionary<KeyCode, bool> _keyStates = new Dictionary<KeyCode, bool>();

		// Token: 0x04000530 RID: 1328
		private new bool _uiInitialized;
	}
}
