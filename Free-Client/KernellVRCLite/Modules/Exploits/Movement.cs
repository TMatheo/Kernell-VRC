using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using KernellClientUI.UI.QuickMenu;
using KernellVRC;
using KernelVRC;
using UnityEngine;
using VRC.Core;
using VRC.SDKBase;

namespace KernellVRCLite.Modules.Exploits
{
	// Token: 0x0200009B RID: 155
	internal class Movement : KernelModuleBase
	{
		// Token: 0x17000172 RID: 370
		// (get) Token: 0x060007E2 RID: 2018 RVA: 0x00030686 File Offset: 0x0002E886
		public override string ModuleName
		{
			get
			{
				return "Movement";
			}
		}

		// Token: 0x17000173 RID: 371
		// (get) Token: 0x060007E3 RID: 2019 RVA: 0x00003304 File Offset: 0x00001504
		public override string Version
		{
			get
			{
				return "2.0.0";
			}
		}

		// Token: 0x17000174 RID: 372
		// (get) Token: 0x060007E4 RID: 2020 RVA: 0x0003068D File Offset: 0x0002E88D
		public override ModuleCapabilities Capabilities
		{
			get
			{
				return ModuleCapabilities.Update | ModuleCapabilities.WorldEvents | ModuleCapabilities.SceneEvents | ModuleCapabilities.UIInit;
			}
		}

		// Token: 0x17000175 RID: 373
		// (get) Token: 0x060007E5 RID: 2021 RVA: 0x00030694 File Offset: 0x0002E894
		public override UpdateFrequency UpdateFrequency
		{
			get
			{
				return UpdateFrequency.Every60Frames;
			}
		}

		// Token: 0x17000176 RID: 374
		// (get) Token: 0x060007E6 RID: 2022 RVA: 0x0002F5E7 File Offset: 0x0002D7E7
		public override ModulePriority Priority
		{
			get
			{
				return ModulePriority.Low;
			}
		}

		// Token: 0x060007E7 RID: 2023 RVA: 0x00030698 File Offset: 0x0002E898
		public override void OnInitialize()
		{
			kernelllogger.Msg("[" + this.ModuleName + "] Module initialized");
		}

		// Token: 0x060007E8 RID: 2024 RVA: 0x000306B6 File Offset: 0x0002E8B6
		public override void OnApplicationStart()
		{
			kernelllogger.Msg("[" + this.ModuleName + "] Application started");
		}

		// Token: 0x060007E9 RID: 2025 RVA: 0x000306D4 File Offset: 0x0002E8D4
		public override void OnUiManagerInit()
		{
			try
			{
				ReMenuCategory category = MenuSetup._uiManager.QMMenu.GetCategoryPage("Utility").GetCategory("Movement");
				category.AddButton("Run Speed", "Adjust your running speed.", new Action(this.RunSpeed), null, "#ffffff");
				category.AddButton("Walk Speed", "Adjust your walking speed.", new Action(this.WalkSpeed), null, "#ffffff");
				category.AddButton("Jump Power", "Adjust your jump height.", new Action(this.JumpPower), null, "#ffffff");
				category.AddToggle("Enable Custom Gravity", "Toggle custom gravity settings.", new Action<bool>(this.ToggleCustomGravity));
				category.AddButton("Set Custom Gravity", "Adjust gravity strength.", new Action(this.CustomGravity), null, "#ffffff");
				category.AddButton("Reset Movement Settings", "Revert all movement settings to default.", new Action(this.ResetDefaults), null, "#ffffff");
				kernelllogger.Msg("[" + this.ModuleName + "] UI initialized successfully");
			}
			catch (Exception ex)
			{
				kernelllogger.Error("[" + this.ModuleName + "] Failed to initialize UI: " + ex.Message);
			}
		}

		// Token: 0x060007EA RID: 2026 RVA: 0x00030830 File Offset: 0x0002EA30
		public override void OnEnterWorld(ApiWorld world, ApiWorldInstance instance)
		{
			this._cachedLocalPlayer = null;
			this._lastPlayerCacheTime = 0f;
			bool defaultsSet = this._defaultsSet;
			if (defaultsSet)
			{
				this.ApplyCurrentSettings();
				kernelllogger.Msg("[" + this.ModuleName + "] Applied movement settings in world: " + world.name);
			}
		}

		// Token: 0x060007EB RID: 2027 RVA: 0x00030884 File Offset: 0x0002EA84
		public override void OnUpdate()
		{
			bool flag = this._defaultsSet && Time.time % 30f < Time.deltaTime;
			if (flag)
			{
				this.ApplyCurrentSettings();
			}
		}

		// Token: 0x060007EC RID: 2028 RVA: 0x000308BC File Offset: 0x0002EABC
		private VRCPlayerApi GetLocalPlayer()
		{
			bool flag = this._cachedLocalPlayer == null || Time.time - this._lastPlayerCacheTime > 5f;
			if (flag)
			{
				this._cachedLocalPlayer = Networking.LocalPlayer;
				this._lastPlayerCacheTime = Time.time;
			}
			return this._cachedLocalPlayer;
		}

		// Token: 0x060007ED RID: 2029 RVA: 0x00030910 File Offset: 0x0002EB10
		private void GetDefaults()
		{
			bool flag = !this._defaultsSet;
			if (flag)
			{
				try
				{
					VRCPlayerApi localPlayer = this.GetLocalPlayer();
					bool flag2 = localPlayer == null;
					if (flag2)
					{
						kernelllogger.Warning("[" + this.ModuleName + "] Local player not available yet, retrying...");
					}
					else
					{
						this._defaultWalkSpeed = localPlayer.GetWalkSpeed();
						this._defaultRunSpeed = localPlayer.GetRunSpeed();
						this._defaultJumpPower = localPlayer.GetJumpImpulse();
						this._defaultGravity = Physics.gravity;
						this._defaultsSet = true;
						this._walkSpeed = this._defaultWalkSpeed;
						this._runSpeed = this._defaultRunSpeed;
						this._jumpPower = this._defaultJumpPower;
						this._enableCustomGravity = false;
						this._customGravity = this._defaultGravity.y;
						kernelllogger.Msg(string.Format("[{0}] Defaults initialized - Walk: {1}, Run: {2}, Jump: {3}", new object[]
						{
							this.ModuleName,
							this._defaultWalkSpeed,
							this._defaultRunSpeed,
							this._defaultJumpPower
						}));
					}
				}
				catch (Exception ex)
				{
					kernelllogger.Error("[" + this.ModuleName + "] Failed to get defaults: " + ex.Message);
				}
			}
		}

		// Token: 0x060007EE RID: 2030 RVA: 0x00030A58 File Offset: 0x0002EC58
		private void ApplyCurrentSettings()
		{
			try
			{
				VRCPlayerApi localPlayer = this.GetLocalPlayer();
				bool flag = localPlayer == null;
				if (flag)
				{
					kernelllogger.Warning("[" + this.ModuleName + "] Cannot apply settings - local player not available");
				}
				else
				{
					localPlayer.SetWalkSpeed(this._walkSpeed);
					localPlayer.SetRunSpeed(this._runSpeed);
					localPlayer.SetJumpImpulse(this._jumpPower);
					bool enableCustomGravity = this._enableCustomGravity;
					if (enableCustomGravity)
					{
						Physics.gravity = new Vector3(this._defaultGravity.x, this._customGravity, this._defaultGravity.z);
						kernelllogger.Msg(string.Format("[{0}] Custom Gravity Applied: {1}", this.ModuleName, Physics.gravity.y));
					}
					else
					{
						Physics.gravity = this._defaultGravity;
						kernelllogger.Msg("[" + this.ModuleName + "] Custom Gravity Disabled: Reverted to Default Gravity");
					}
				}
			}
			catch (Exception ex)
			{
				kernelllogger.Error("[" + this.ModuleName + "] Failed to apply settings: " + ex.Message);
			}
		}

		// Token: 0x060007EF RID: 2031 RVA: 0x00030B7C File Offset: 0x0002ED7C
		private bool ValidateMovementValue(float value, float min, float max, string settingName)
		{
			bool flag = value < min || value > max;
			bool result;
			if (flag)
			{
				kernelllogger.Warning(string.Format("[{0}] {1} value {2} is out of range ({3}-{4}). Clamping to valid range.", new object[]
				{
					this.ModuleName,
					settingName,
					value,
					min,
					max
				}));
				result = false;
			}
			else
			{
				result = true;
			}
			return result;
		}

		// Token: 0x060007F0 RID: 2032 RVA: 0x00030BE4 File Offset: 0x0002EDE4
		[DebuggerStepThrough]
		private void RunSpeed()
		{
			Movement.<RunSpeed>d__32 <RunSpeed>d__ = new Movement.<RunSpeed>d__32();
			<RunSpeed>d__.<>t__builder = AsyncVoidMethodBuilder.Create();
			<RunSpeed>d__.<>4__this = this;
			<RunSpeed>d__.<>1__state = -1;
			<RunSpeed>d__.<>t__builder.Start<Movement.<RunSpeed>d__32>(ref <RunSpeed>d__);
		}

		// Token: 0x060007F1 RID: 2033 RVA: 0x00030C20 File Offset: 0x0002EE20
		[DebuggerStepThrough]
		private void WalkSpeed()
		{
			Movement.<WalkSpeed>d__33 <WalkSpeed>d__ = new Movement.<WalkSpeed>d__33();
			<WalkSpeed>d__.<>t__builder = AsyncVoidMethodBuilder.Create();
			<WalkSpeed>d__.<>4__this = this;
			<WalkSpeed>d__.<>1__state = -1;
			<WalkSpeed>d__.<>t__builder.Start<Movement.<WalkSpeed>d__33>(ref <WalkSpeed>d__);
		}

		// Token: 0x060007F2 RID: 2034 RVA: 0x00030C5C File Offset: 0x0002EE5C
		[DebuggerStepThrough]
		private void JumpPower()
		{
			Movement.<JumpPower>d__34 <JumpPower>d__ = new Movement.<JumpPower>d__34();
			<JumpPower>d__.<>t__builder = AsyncVoidMethodBuilder.Create();
			<JumpPower>d__.<>4__this = this;
			<JumpPower>d__.<>1__state = -1;
			<JumpPower>d__.<>t__builder.Start<Movement.<JumpPower>d__34>(ref <JumpPower>d__);
		}

		// Token: 0x060007F3 RID: 2035 RVA: 0x00030C98 File Offset: 0x0002EE98
		private void ToggleCustomGravity(bool state)
		{
			try
			{
				this.GetDefaults();
				bool flag = !this._defaultsSet;
				if (flag)
				{
					kernelllogger.Error("[" + this.ModuleName + "] Cannot toggle gravity - defaults not set");
				}
				else
				{
					this._enableCustomGravity = state;
					this.ApplyCurrentSettings();
					kernelllogger.Msg("[" + this.ModuleName + "] Custom Gravity " + (state ? "Enabled" : "Disabled"));
				}
			}
			catch (Exception ex)
			{
				kernelllogger.Error("[" + this.ModuleName + "] Error toggling custom gravity: " + ex.Message);
			}
		}

		// Token: 0x060007F4 RID: 2036 RVA: 0x00030D4C File Offset: 0x0002EF4C
		[DebuggerStepThrough]
		private void CustomGravity()
		{
			Movement.<CustomGravity>d__36 <CustomGravity>d__ = new Movement.<CustomGravity>d__36();
			<CustomGravity>d__.<>t__builder = AsyncVoidMethodBuilder.Create();
			<CustomGravity>d__.<>4__this = this;
			<CustomGravity>d__.<>1__state = -1;
			<CustomGravity>d__.<>t__builder.Start<Movement.<CustomGravity>d__36>(ref <CustomGravity>d__);
		}

		// Token: 0x060007F5 RID: 2037 RVA: 0x00030D88 File Offset: 0x0002EF88
		private void ResetDefaults()
		{
			try
			{
				bool flag = !this._defaultsSet;
				if (flag)
				{
					this.GetDefaults();
					bool flag2 = !this._defaultsSet;
					if (flag2)
					{
						kernelllogger.Error("[" + this.ModuleName + "] Cannot reset - defaults not available");
						return;
					}
				}
				this._walkSpeed = this._defaultWalkSpeed;
				this._runSpeed = this._defaultRunSpeed;
				this._jumpPower = this._defaultJumpPower;
				this._enableCustomGravity = false;
				this._customGravity = this._defaultGravity.y;
				this.ApplyCurrentSettings();
				kernelllogger.Msg("[" + this.ModuleName + "] Movement settings have been reset to default.");
			}
			catch (Exception ex)
			{
				kernelllogger.Error("[" + this.ModuleName + "] Error resetting defaults: " + ex.Message);
			}
		}

		// Token: 0x060007F6 RID: 2038 RVA: 0x00030E74 File Offset: 0x0002F074
		public override void OnSceneWasLoaded(int buildIndex, string sceneName)
		{
			this._cachedLocalPlayer = null;
			this._lastPlayerCacheTime = 0f;
			kernelllogger.Msg(string.Format("[{0}] Scene loaded: {1} (Index: {2})", this.ModuleName, sceneName, buildIndex));
		}

		// Token: 0x040003C6 RID: 966
		private float _defaultWalkSpeed;

		// Token: 0x040003C7 RID: 967
		private float _defaultRunSpeed;

		// Token: 0x040003C8 RID: 968
		private float _defaultJumpPower;

		// Token: 0x040003C9 RID: 969
		private bool _defaultsSet;

		// Token: 0x040003CA RID: 970
		private float _walkSpeed;

		// Token: 0x040003CB RID: 971
		private float _runSpeed;

		// Token: 0x040003CC RID: 972
		private float _jumpPower;

		// Token: 0x040003CD RID: 973
		private bool _enableCustomGravity;

		// Token: 0x040003CE RID: 974
		private float _customGravity;

		// Token: 0x040003CF RID: 975
		private Vector3 _defaultGravity;

		// Token: 0x040003D0 RID: 976
		private VRCPlayerApi _cachedLocalPlayer;

		// Token: 0x040003D1 RID: 977
		private float _lastPlayerCacheTime;

		// Token: 0x040003D2 RID: 978
		private const float PLAYER_CACHE_DURATION = 5f;
	}
}
