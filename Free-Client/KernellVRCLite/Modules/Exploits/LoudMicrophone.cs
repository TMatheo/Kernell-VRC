using System;
using KernellClientUI.UI.QuickMenu;
using KernellVRC;
using KernelVRC;
using UnityEngine;
using VRC;
using VRC.Core;

namespace KernellVRCLite.Modules.Exploits
{
	// Token: 0x0200009A RID: 154
	internal class LoudMicrophone : KernelModuleBase
	{
		// Token: 0x1700016D RID: 365
		// (get) Token: 0x060007CD RID: 1997 RVA: 0x00030074 File Offset: 0x0002E274
		public override string ModuleName
		{
			get
			{
				return "LoudMicrophone";
			}
		}

		// Token: 0x1700016E RID: 366
		// (get) Token: 0x060007CE RID: 1998 RVA: 0x00003304 File Offset: 0x00001504
		public override string Version
		{
			get
			{
				return "2.0.0";
			}
		}

		// Token: 0x1700016F RID: 367
		// (get) Token: 0x060007CF RID: 1999 RVA: 0x0003007B File Offset: 0x0002E27B
		public override ModuleCapabilities Capabilities
		{
			get
			{
				return ModuleCapabilities.WorldEvents | ModuleCapabilities.SceneEvents | ModuleCapabilities.UIInit;
			}
		}

		// Token: 0x17000170 RID: 368
		// (get) Token: 0x060007D0 RID: 2000 RVA: 0x00030082 File Offset: 0x0002E282
		public override UpdateFrequency UpdateFrequency
		{
			get
			{
				return UpdateFrequency.Every120Frames;
			}
		}

		// Token: 0x17000171 RID: 369
		// (get) Token: 0x060007D1 RID: 2001 RVA: 0x0002F5E7 File Offset: 0x0002D7E7
		public override ModulePriority Priority
		{
			get
			{
				return ModulePriority.Low;
			}
		}

		// Token: 0x060007D2 RID: 2002 RVA: 0x00030086 File Offset: 0x0002E286
		public override void OnInitialize()
		{
			kernelllogger.Msg("[" + this.ModuleName + "] Module initialized");
		}

		// Token: 0x060007D3 RID: 2003 RVA: 0x000300A4 File Offset: 0x0002E2A4
		public override void OnApplicationStart()
		{
			kernelllogger.Msg("[" + this.ModuleName + "] Application started");
		}

		// Token: 0x060007D4 RID: 2004 RVA: 0x000300C4 File Offset: 0x0002E2C4
		public override void OnUiManagerInit()
		{
			try
			{
				ReMenuCategory category = MenuSetup._uiManager.QMMenu.GetCategoryPage("Utility").GetCategory("Other");
				category.AddToggle("Loud Microphone", "Did you break your mic?", new Action<bool>(this.LoudMic));
				IButtonPage launchPad = MenuSetup._uiManager.LaunchPad;
				launchPad.AddToggle("Loud Microphone", "Did you break your mic?", new Action<bool>(this.LoudMic), false, "#ffffff");
				kernelllogger.Msg("[" + this.ModuleName + "] UI initialized successfully");
			}
			catch (Exception ex)
			{
				kernelllogger.Error("[" + this.ModuleName + "] Failed to initialize UI: " + ex.Message);
			}
		}

		// Token: 0x060007D5 RID: 2005 RVA: 0x00030194 File Offset: 0x0002E394
		public override void OnEnterWorld(ApiWorld world, ApiWorldInstance instance)
		{
			bool isLoudMicEnabled = this._isLoudMicEnabled;
			if (isLoudMicEnabled)
			{
				this.ApplyLoudMic(true);
				kernelllogger.Msg("[" + this.ModuleName + "] Reapplied loud mic settings in world: " + world.name);
			}
		}

		// Token: 0x060007D6 RID: 2006 RVA: 0x000301D8 File Offset: 0x0002E3D8
		public override void OnUpdate()
		{
			bool flag = Time.time % 30f < Time.deltaTime && this._isLoudMicEnabled;
			if (flag)
			{
				try
				{
					bool flag2 = USpeaker.field_Internal_Static_Single_1 != float.MaxValue;
					if (flag2)
					{
						this.ApplyLoudMic(true);
						kernelllogger.Msg("[" + this.ModuleName + "] Loud mic setting was overridden, reapplying...");
					}
				}
				catch (Exception ex)
				{
					kernelllogger.Error("[" + this.ModuleName + "] Error checking mic volume in update: " + ex.Message);
				}
			}
		}

		// Token: 0x060007D7 RID: 2007 RVA: 0x0003027C File Offset: 0x0002E47C
		private void LoudMic(bool enable)
		{
			try
			{
				this._isLoudMicEnabled = enable;
				this.ApplyLoudMic(enable);
				string str = enable ? "enabled" : "disabled";
				kernelllogger.Msg("[" + this.ModuleName + "] Loud microphone " + str);
			}
			catch (Exception ex)
			{
				kernelllogger.Error("[" + this.ModuleName + "] Error toggling loud mic: " + ex.Message);
			}
		}

		// Token: 0x060007D8 RID: 2008 RVA: 0x00030300 File Offset: 0x0002E500
		private void ApplyLoudMic(bool enable)
		{
			try
			{
				if (enable)
				{
					bool flag = !this._originalVolumeStored;
					if (flag)
					{
						this._originalMicVolume = USpeaker.field_Internal_Static_Single_1;
						this._originalVolumeStored = true;
						kernelllogger.Msg(string.Format("[{0}] Stored original volume: {1}", this.ModuleName, this._originalMicVolume));
					}
					USpeaker.field_Internal_Static_Single_1 = float.MaxValue;
					kernelllogger.Msg(string.Format("[{0}] Applied loud microphone (volume: {1})", this.ModuleName, float.MaxValue));
				}
				else
				{
					float num = this._originalVolumeStored ? this._originalMicVolume : 1f;
					USpeaker.field_Internal_Static_Single_1 = num;
					kernelllogger.Msg(string.Format("[{0}] Restored original microphone volume: {1}", this.ModuleName, num));
				}
			}
			catch (Exception ex)
			{
				kernelllogger.Error("[" + this.ModuleName + "] Failed to apply mic volume change: " + ex.Message);
				try
				{
					USpeaker.field_Internal_Static_Single_1 = 1f;
					kernelllogger.Msg("[" + this.ModuleName + "] Applied fallback safe volume");
				}
				catch (Exception ex2)
				{
					kernelllogger.Error("[" + this.ModuleName + "] Fallback volume restore also failed: " + ex2.Message);
				}
			}
		}

		// Token: 0x060007D9 RID: 2009 RVA: 0x00030458 File Offset: 0x0002E658
		public bool IsLoudMicEnabled()
		{
			return this._isLoudMicEnabled;
		}

		// Token: 0x060007DA RID: 2010 RVA: 0x00030470 File Offset: 0x0002E670
		public void ResetMicToSafe()
		{
			try
			{
				this._isLoudMicEnabled = false;
				this.ApplyLoudMic(false);
				kernelllogger.Msg("[" + this.ModuleName + "] Manually reset microphone to safe volume");
			}
			catch (Exception ex)
			{
				kernelllogger.Error("[" + this.ModuleName + "] Error during manual reset: " + ex.Message);
			}
		}

		// Token: 0x060007DB RID: 2011 RVA: 0x000304E4 File Offset: 0x0002E6E4
		public override void OnPlayerJoined(Player player)
		{
			bool isLoudMicEnabled = this._isLoudMicEnabled;
			if (isLoudMicEnabled)
			{
				string[] array = new string[5];
				array[0] = "[";
				array[1] = this.ModuleName;
				array[2] = "] Player ";
				int num = 3;
				APIUser field_Private_APIUser_ = player.field_Private_APIUser_0;
				array[num] = ((field_Private_APIUser_ != null) ? field_Private_APIUser_.displayName : null);
				array[4] = " joined while loud mic is active";
				kernelllogger.Msg(string.Concat(array));
			}
		}

		// Token: 0x060007DC RID: 2012 RVA: 0x00030548 File Offset: 0x0002E748
		public override void OnPlayerLeft(Player player)
		{
			bool isLoudMicEnabled = this._isLoudMicEnabled;
			if (isLoudMicEnabled)
			{
				string[] array = new string[5];
				array[0] = "[";
				array[1] = this.ModuleName;
				array[2] = "] Player ";
				int num = 3;
				APIUser field_Private_APIUser_ = player.field_Private_APIUser_0;
				array[num] = ((field_Private_APIUser_ != null) ? field_Private_APIUser_.displayName : null);
				array[4] = " left while loud mic was active";
				kernelllogger.Msg(string.Concat(array));
			}
		}

		// Token: 0x060007DD RID: 2013 RVA: 0x000305AC File Offset: 0x0002E7AC
		public override void OnSceneWasLoaded(int buildIndex, string sceneName)
		{
			kernelllogger.Msg(string.Format("[{0}] Scene loaded: {1} (Index: {2})", this.ModuleName, sceneName, buildIndex));
			bool isLoudMicEnabled = this._isLoudMicEnabled;
			if (isLoudMicEnabled)
			{
				this.ApplyLoudMic(true);
			}
		}

		// Token: 0x060007DE RID: 2014 RVA: 0x000053C4 File Offset: 0x000035C4
		public override void OnMenuOpened()
		{
		}

		// Token: 0x060007DF RID: 2015 RVA: 0x000053C4 File Offset: 0x000035C4
		public override void OnMenuClosed()
		{
		}

		// Token: 0x060007E0 RID: 2016 RVA: 0x000305EC File Offset: 0x0002E7EC
		public void Cleanup()
		{
			try
			{
				bool isLoudMicEnabled = this._isLoudMicEnabled;
				if (isLoudMicEnabled)
				{
					this.ResetMicToSafe();
				}
				kernelllogger.Msg("[" + this.ModuleName + "] Module cleanup completed");
			}
			catch (Exception ex)
			{
				kernelllogger.Error("[" + this.ModuleName + "] Error during cleanup: " + ex.Message);
			}
		}

		// Token: 0x040003C3 RID: 963
		private bool _isLoudMicEnabled = false;

		// Token: 0x040003C4 RID: 964
		private float _originalMicVolume = 1f;

		// Token: 0x040003C5 RID: 965
		private bool _originalVolumeStored = false;
	}
}
