using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using KernellClientUI.UI.QuickMenu;
using KernelVRC;
using MelonLoader;
using UnityEngine;
using VRC.Core;
using VRC.SDKBase;

namespace KernellVRC.Modules.Exploits
{
	// Token: 0x02000078 RID: 120
	public class InstanceHistoryModule : KernelModuleBase
	{
		// Token: 0x17000113 RID: 275
		// (get) Token: 0x06000562 RID: 1378 RVA: 0x000207C0 File Offset: 0x0001E9C0
		public override string ModuleName
		{
			get
			{
				return "Instance history";
			}
		}

		// Token: 0x17000114 RID: 276
		// (get) Token: 0x06000563 RID: 1379 RVA: 0x00003304 File Offset: 0x00001504
		public override string Version
		{
			get
			{
				return "2.0.0";
			}
		}

		// Token: 0x17000115 RID: 277
		// (get) Token: 0x06000564 RID: 1380 RVA: 0x000207C7 File Offset: 0x0001E9C7
		public override ModuleCapabilities Capabilities
		{
			get
			{
				return ModuleCapabilities.PlayerEvents | ModuleCapabilities.WorldEvents | ModuleCapabilities.AvatarEvents | ModuleCapabilities.SceneEvents | ModuleCapabilities.UIInit;
			}
		}

		// Token: 0x06000565 RID: 1381 RVA: 0x000207D0 File Offset: 0x0001E9D0
		public override void OnUiManagerInit()
		{
			this.LoadHistoryFromFile();
			MenuSetup._uiManager.QMMenu.GetCategoryPage("Utility").AddCategory("Instances", true, "#ffffff", false).AddCategoryPage("InstanceHistory", "Instance History", delegate(ReCategoryPage mainPage)
			{
				this.BuildInstanceHistoryUI(mainPage);
			}, null, "#ffffff");
			IButtonPage launchPad = MenuSetup._uiManager.LaunchPad;
			launchPad.AddButton("Instance History", "", delegate
			{
				MenuSetup._uiManager.QMMenu.GetCategoryPage("Utility").GetCategory("Instances").GetCategoryPage("InstanceHistory").Open();
			}, null, "#ffffff");
		}

		// Token: 0x06000566 RID: 1382 RVA: 0x00020870 File Offset: 0x0001EA70
		private void BuildInstanceHistoryUI(ReCategoryPage mainPage)
		{
			ReMenuCategory reMenuCategory = mainPage.GetCategory("Actions");
			bool flag = reMenuCategory == null;
			if (flag)
			{
				reMenuCategory = mainPage.AddCategory("Actions", "#c97932");
				reMenuCategory.AddButton("<color=red>Clear History</color>", "Clear the instance history file", delegate
				{
					this.ClearHistory(mainPage);
				}, null, "#ff5555");
				reMenuCategory.AddSpacer(null);
				reMenuCategory.AddSpacer(null);
				reMenuCategory.AddCategoryPage("PrevButton", "Previous Page", delegate(ReCategoryPage prevPage)
				{
					this._previousPage = prevPage;
				}, null, "#ffffff");
			}
			else
			{
				reMenuCategory.Header.Title = "<color=#c97932>Actions</color>";
			}
			bool flag2 = this._historyListCategory == null;
			if (flag2)
			{
				this._historyListCategory = mainPage.AddCategory(string.Format("| Instance History | ({0})", this._dynamicCounter), "#32c93c");
				this._dynamicCounter++;
			}
			else
			{
				this._historyListCategory.ClearSubCategories();
				this._historyListCategory.Header.Title = "<color=#32c93c>| Instance History |</color>";
				this._historyListCategory.Active = true;
			}
			foreach (InstanceHistoryModule.InstanceEntry entry in InstanceHistoryModule._history)
			{
				this.AddInstanceButton(entry);
			}
		}

		// Token: 0x06000567 RID: 1383 RVA: 0x000209F8 File Offset: 0x0001EBF8
		private void AddInstanceButton(InstanceHistoryModule.InstanceEntry entry)
		{
			string text = entry.InstanceName + "\n" + entry.DisplayDate;
			string displayDate = entry.DisplayDate;
			Action <>9__1;
			this._historyListCategory.AddCategoryPage(text, displayDate, delegate(ReCategoryPage joinPage)
			{
				this._dynamicCounter2++;
				ReMenuCategory reMenuCategory = joinPage.AddCategory("world control", true, "#ffffff", false);
				string text2 = "Join";
				string tooltip = "Join this world";
				Action onClick;
				if ((onClick = <>9__1) == null)
				{
					onClick = (<>9__1 = delegate()
					{
						Networking.GoToRoom(entry.InstanceId);
					});
				}
				reMenuCategory.AddButton(text2, tooltip, onClick, null, "#ffffff");
				joinPage.Open();
			}, null, "#ffffff");
		}

		// Token: 0x06000568 RID: 1384 RVA: 0x00020A68 File Offset: 0x0001EC68
		private void ClearHistory(ReCategoryPage mainPage)
		{
			ReMenuCategory category = mainPage.GetCategory("Actions");
			bool flag = InstanceHistoryModule._history.Count > 0;
			if (flag)
			{
				try
				{
					Directory.CreateDirectory(Path.GetDirectoryName(InstanceHistoryModule.HISTORY_FILE_PATH) ?? string.Empty);
					using (new FileStream(InstanceHistoryModule.HISTORY_FILE_PATH, FileMode.Truncate))
					{
					}
					InstanceHistoryModule._history.Clear();
					kernelllogger.Msg("[InstanceHistoryModule] History file cleared.");
					this.BuildInstanceHistoryUI(mainPage);
					this._spamClickCount = 0;
					return;
				}
				catch (Exception arg)
				{
					kernelllogger.Msg(string.Format("[InstanceHistoryModule] Error clearing file: {0}", arg));
					return;
				}
			}
			bool historyLocked = this._historyLocked;
			if (historyLocked)
			{
				bool flag2 = Time.time >= this._lockEndTime;
				if (!flag2)
				{
					float num = Mathf.Ceil(this._lockEndTime - Time.time);
					category.Header.Title = string.Format("<color=#ff0000>LOCKED: {0}s remaining</color>", num);
					return;
				}
				this._historyLocked = false;
				this._spamClickCount = 0;
				category.Header.Title = "<color=#c97932>Actions</color>";
			}
			bool flag3 = Time.time - this._lastClearClickTime > 10f;
			if (flag3)
			{
				this._spamClickCount = 0;
			}
			this._spamClickCount++;
			this._lastClearClickTime = Time.time;
			bool flag4 = this._spamClickCount < 10;
			if (!flag4)
			{
				bool flag5 = this._spamClickCount < 50;
				if (flag5)
				{
					category.Header.Title = string.Format("<color=#ff9900>Warning: {0} clicks</color>", this._spamClickCount);
				}
				else
				{
					bool flag6 = this._spamClickCount >= 50;
					if (flag6)
					{
						this._historyListCategory.Active = false;
						this._historyLocked = true;
						this._lockEndTime = Time.time + 30f;
						float num2 = Mathf.Ceil(this._lockEndTime - Time.time);
						category.Header.Title = string.Format("<color=#ff0000>LOCKED: {0}s remaining</color>", num2);
					}
				}
			}
		}

		// Token: 0x06000569 RID: 1385 RVA: 0x00020C98 File Offset: 0x0001EE98
		public IEnumerator SaveCurrentInstance()
		{
			while (RoomManager.field_Private_Static_ApiWorldInstance_1 == null)
			{
				yield return null;
			}
			ApiWorldInstance inst = RoomManager.field_Private_Static_ApiWorldInstance_1;
			string instanceId = inst.id;
			string combinedName = inst.world.name + " " + inst.name;
			DateTime timestamp = DateTime.Now;
			try
			{
				InstanceHistoryModule.InstanceEntry newEntry = new InstanceHistoryModule.InstanceEntry
				{
					InstanceId = instanceId,
					InstanceName = combinedName,
					Timestamp = timestamp
				};
				InstanceHistoryModule._history.Add(newEntry);
				this.SaveHistoryToFile();
				bool flag = this._historyListCategory != null;
				if (flag)
				{
					this.AddInstanceButton(newEntry);
				}
				kernelllogger.Msg("[InstanceHistoryModule] Added instance => " + instanceId);
				newEntry = null;
				yield break;
			}
			catch (Exception ex2)
			{
				Exception ex = ex2;
				kernelllogger.Msg(string.Format("[InstanceHistoryModule] Error saving instance: {0}", ex));
				yield break;
			}
			yield break;
		}

		// Token: 0x0600056A RID: 1386 RVA: 0x00020CA7 File Offset: 0x0001EEA7
		public override void OnEnterWorld(ApiWorld world, ApiWorldInstance instance)
		{
			MelonCoroutines.Start(this.SaveCurrentInstance());
		}

		// Token: 0x0600056B RID: 1387 RVA: 0x00020CB8 File Offset: 0x0001EEB8
		private void LoadHistoryFromFile()
		{
			InstanceHistoryModule._history.Clear();
			try
			{
				bool flag = !File.Exists(InstanceHistoryModule.HISTORY_FILE_PATH);
				if (!flag)
				{
					using (StreamReader streamReader = new StreamReader(InstanceHistoryModule.HISTORY_FILE_PATH))
					{
						string text;
						while ((text = streamReader.ReadLine()) != null)
						{
							string[] array = text.Split(new char[]
							{
								','
							});
							bool flag2 = array.Length == 3;
							if (flag2)
							{
								string instanceId = array[0];
								string instanceName = array[1];
								DateTime timestamp;
								bool flag3 = DateTime.TryParse(array[2], out timestamp);
								if (flag3)
								{
									InstanceHistoryModule._history.Add(new InstanceHistoryModule.InstanceEntry
									{
										InstanceId = instanceId,
										InstanceName = instanceName,
										Timestamp = timestamp
									});
								}
								else
								{
									kernelllogger.Msg("[InstanceHistoryModule] Invalid date format in file line.");
								}
							}
							else
							{
								kernelllogger.Msg("[InstanceHistoryModule] Invalid data format in file line.");
							}
						}
					}
				}
			}
			catch (Exception arg)
			{
				kernelllogger.Msg(string.Format("[InstanceHistoryModule] Error loading file: {0}", arg));
			}
		}

		// Token: 0x0600056C RID: 1388 RVA: 0x00020DD8 File Offset: 0x0001EFD8
		private void SaveHistoryToFile()
		{
			try
			{
				Directory.CreateDirectory(Path.GetDirectoryName(InstanceHistoryModule.HISTORY_FILE_PATH) ?? string.Empty);
				using (StreamWriter streamWriter = new StreamWriter(InstanceHistoryModule.HISTORY_FILE_PATH, false))
				{
					foreach (InstanceHistoryModule.InstanceEntry instanceEntry in InstanceHistoryModule._history)
					{
						streamWriter.WriteLine(string.Format("{0},{1},{2}", instanceEntry.InstanceId, instanceEntry.InstanceName, instanceEntry.Timestamp));
					}
				}
			}
			catch (Exception arg)
			{
				kernelllogger.Msg(string.Format("[InstanceHistoryModule] Error saving file: {0}", arg));
			}
		}

		// Token: 0x04000268 RID: 616
		private static readonly string HISTORY_FILE_PATH = Path.Combine(Environment.CurrentDirectory, "KernellVRC", "InstanceHistory.txt");

		// Token: 0x04000269 RID: 617
		private static readonly List<InstanceHistoryModule.InstanceEntry> _history = new List<InstanceHistoryModule.InstanceEntry>();

		// Token: 0x0400026A RID: 618
		private ReMenuCategory _historyListCategory;

		// Token: 0x0400026B RID: 619
		private ReCategoryPage _previousPage;

		// Token: 0x0400026C RID: 620
		private int _dynamicCounter = 0;

		// Token: 0x0400026D RID: 621
		private int _dynamicCounter2 = 0;

		// Token: 0x0400026E RID: 622
		private float _lastClearClickTime = 0f;

		// Token: 0x0400026F RID: 623
		private int _spamClickCount = 0;

		// Token: 0x04000270 RID: 624
		private const float SpamTimeout = 10f;

		// Token: 0x04000271 RID: 625
		private bool _historyLocked = false;

		// Token: 0x04000272 RID: 626
		private float _lockEndTime = 0f;

		// Token: 0x04000273 RID: 627
		private const float LockDuration = 30f;

		// Token: 0x04000274 RID: 628
		private const int SpamThreshold = 50;

		// Token: 0x04000275 RID: 629
		private const int WarningClicks = 10;

		// Token: 0x02000135 RID: 309
		private class InstanceEntry
		{
			// Token: 0x17000220 RID: 544
			// (get) Token: 0x06000BCB RID: 3019 RVA: 0x00044404 File Offset: 0x00042604
			public string DisplayDate
			{
				get
				{
					return this.Timestamp.ToString("dd/MM HH:mm");
				}
			}

			// Token: 0x040006D3 RID: 1747
			public string InstanceId;

			// Token: 0x040006D4 RID: 1748
			public string InstanceName;

			// Token: 0x040006D5 RID: 1749
			public DateTime Timestamp;
		}
	}
}
